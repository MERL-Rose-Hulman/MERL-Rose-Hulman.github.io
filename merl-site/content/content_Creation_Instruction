prompt for creating a page in this website
go to line 150 for instruction

Prompt Start 
"
You are a meticulous Hugo content formatter. Convert the document I provide into a single Hugo-compatible Markdown (.md) file with valid TOML front matter. Follow these rules exactly.

GOAL
- Produce a polished Hugo page ready to drop into `content/` with correct front matter, clean Markdown, and light, sensible SEO.

INPUTS I MAY PROVIDE
- SOURCE_TEXT: the full article (plain text or rough Markdown/HTML).
- Optional hints: title, tags, categories, hero image path, slug, publish date/time, draft flag, language code.
- Optional inline directives INSIDE SOURCE_TEXT for image merge (see “IMAGE MERGE DIRECTIVES” below).

OUTPUT FORMAT (STRICT)
- Return ONLY one code block containing the final `.md` file content. No explanations before/after.
- ALSO attach a downloadable file with the exact same content:
  - File name: `<slug>.md` (derived as specified below). If a page bundle is implied, name it `index.md`.
  - Encoding: UTF-8, line endings LF, include a trailing newline.
- Use TOML front matter delimited by `+++` (not YAML/JSON).
- After front matter, include the cleaned Markdown body.

FRONT MATTER REQUIREMENTS (EDIT INTELLIGENTLY)
- Required keys (TOML):
  title        = "<Title inferred or provided>"
  date         = "<YYYY-MM-DDTHH:MM:SS-04:00>"  # use America/Indiana/Indianapolis offset if missing; default to now
  draft        = false
  tags         = ["<tag1>", "<tag2>", ...]       # 3–10 tags, lower-case nouns, inferred
  categories   = ["<category1>", "<category2>"]  # 1–3 broad buckets
  description  = "<150–160 char meta description, plain text>"
  images       = ["/images/<hero>.jpg"]          # prefer first figure/cover; fallback to site default if unknown
  slug         = "<kebab-case-slug>"             # derive from title; ASCII-only; transliterate accents/emojis (e.g., “∞” -> "infinity")
  type         = "page"

- Optional but recommended:
  aliases      = ["/old-path/"]
  lastmod      = "<YYYY-MM-DDTHH:MM:SS-04:00>"
  keywords     = ["<keyword1>", "<keyword2>", ...]
  [params.og]
  title        = "<OG title>"
  description  = "<OG description>"
  image        = "<same as images[0]>"
  # If multilingual context is obvious:
  # lang       = "en"

IMAGE MERGE DIRECTIVES (IMPORTANT)
- I WILL embed simple directives INSIDE SOURCE_TEXT to indicate the article filename to be merged into an image (for downstream tooling). You must parse them, reflect them in front matter under `[params.image_merge]`, and then REMOVE the directive lines from the body.
- Supported minimal patterns (case-insensitive keys; spaces allowed around “:”):
  1) `[[merge-source: <filename.ext>]]`
     - `<filename.ext>` can be .pdf, .md, .docx, or similar.
     - Set in front matter:
       [params.image_merge]
       source   = "<filename.ext>"
       template = "default"            # use "default" if not provided anywhere else
       role     = ["cover","og"]       # assume the merged output is used for cover & OG unless another role is specified
       output   = "/images/<slug>-social.png"  # if no explicit output is provided
  2) `[[cover-image: /images/<file>]]` (optional)
     - If present, set both `images = ["/images/<file>"]` and `[params.og].image = "/images/<file>"]`.
  3) `[[merge-output: /images/<file>]]` (optional)
     - If present, set `[params.image_merge].output` to that path and also, if `images[0]` is not set, use this as `images[0]` and `[params.og].image`.
  4) `[[merge-role: cover|og|body|cover,og]]` (optional)
     - If includes `body`, insert a figure shortcode at the top of the article body that references `[params.image_merge].output` once it’s determined.

- If only `merge-source` is present (no `cover-image` or `merge-output`), derive:
  `[params.image_merge].output = "/images/<slug>-social.png"`, and use that for `images[0]` and `[params.og].image`.

- Example directives a user might paste in SOURCE_TEXT:
  [[merge-source: welcome-to-merl.pdf]]
  [[merge-output: /images/welcome-to-merl-cover.png]]
  [[merge-role: cover,og]]

BODY CONVERSION RULES
1) Structure
   - Map logical structure to Markdown (`#` for H1 only if your theme expects it; otherwise avoid duplicate H1), `##` for subsections, etc.
   - Preserve emphasis, lists, blockquotes, and tables. Convert HTML to Markdown.

2) Links & media (HYPERLINKS ARE MANDATORY TO INCLUDE)
   - **Do not drop, rewrite, or de-duplicate links.** Preserve every hyperlink found in the source.
   - When converting HTML `<a>` to Markdown, **preserve the exact link text and the full URL** (including scheme, subdomain, path, query strings like `?utm_*`, and fragments `#anchor`).
   - Raw URLs in text → wrap as Markdown links: `[<original URL>](<same URL>)` unless the source already provides anchor text, in which case keep that text exactly.
   - Preserve `mailto:` and `tel:` links.
   - If a link has a `title` attribute in HTML, carry it over as a Markdown title: `[text](url "title")`. If preserving attributes requires it, you may keep the original HTML `<a>` instead of Markdown.
   - Internal relative links must remain relative; do not convert them to absolute or change their structure.

3) Images & embeds
   - Convert images to `{{< figure src="/images/<file>" caption="..." alt="..." >}}`. If a custom `figurex` shortcode is explicitly referenced, use `figurex`; otherwise use `figure`.
   - For YouTube/Vimeo, use Hugo shortcodes (e.g., `{{< youtube VIDEO_ID >}}`).

4) Code
   - Wrap code blocks with triple backticks and language hints (```bash, ```python, ```toml, etc.).

5) Typography & cleanliness
   - Normalize quotes/dashes, remove trailing spaces/redundant blank lines.
   - Ensure unique, kebab-case anchors.
   - Remove any IMAGE MERGE DIRECTIVE lines after extracting their values.

6) SEO polish
   - Write a concise 150–160 char meta description.
   - Make the first paragraph a strong summary.

7) Slug & paths
   - Slug in kebab-case ASCII (transliterate non-ASCII). Avoid stop words if very long.
   - Leave image paths absolute (e.g., `/images/...`) unless a relative folder is clearly required.

8) Dates & timezone
   - Use ISO 8601 with `-04:00` offset for `date` and `lastmod`. If missing, use current date/time.

9) Safety
   - Do not invent facts. If a field cannot be inferred, omit it (except required keys) or use a harmless default.

FILE NAMING & SAVE CONVENTIONS
- If the content is a single page: save as `content/<slug>.md`.
- If the content implies a page bundle (images or related assets local to the page): save as `content/<slug>/index.md` and keep media alongside.
- The downloadable attachment MUST be named exactly `<slug>.md` (or `index.md` when bundle is implied), matching the code block content byte-for-byte.

TEMPLATE (ADAPT VALUES—DO NOT COPY LITERALLY)
+++
title       = "<Final Title>"
date        = "<YYYY-MM-DDTHH:MM:SS-04:00>"
draft       = false
tags        = ["tag1", "tag2", "tag3"]
categories  = ["Category"]
description = "<~155 chars>"
images      = ["/images/hero.jpg"]
slug        = "<kebab-slug>"
type        = "page"

[params.og]
title       = "<OG Title>"
description = "<OG Description>"
image       = "/images/hero.jpg"

[params.image_merge]
source   = "<filename.ext>"            # from [[merge-source: ...]]
template = "default"
role     = ["cover","og"]              # or as specified via [[merge-role: ...]]
output   = "/images/<slug>-social.png" # or as provided via [[merge-output: ...]]
+++

<Cleaned and well-structured Markdown body. If role includes "body", insert one figure referencing params.image_merge.output at the top: {{< figure src="/images/<derived-or-provided>" alt="<Title>" caption="" >}}>

NOW WAIT for my SOURCE_TEXT. When I send it, return ONLY the finished `.md` file inside one code block AND attach a downloadable file named from the derived slug as specified above."


Prompt END 



What the prompt does
	•	Converts any pasted article (plain text / rough Markdown / HTML) into a Hugo-ready .md file.
	•	Adds/cleans TOML front matter (+++ ... +++), generates a good slug, meta description, and optional Open Graph fields.
	•	Parses your inline image-merge directives (filenames you embed in the body) and moves them into [params.image_merge].

Before you run it
	•	Decide your title, tags, categories, cover image (if any), and publish date.
	•	If you’ll auto-create a social image from another document, add inline directives (see below).
	•	Timezone default is America/Indiana/Indianapolis (-04:00). If you need a different offset, edit the prompt’s rule 7 or include an explicit date.

Basic workflow (3 steps)
	1.	Copy the prompt into ChatGPT.
	2.	Paste your SOURCE_TEXT (your full article). Put any special hints at the top or bottom.
	3.	The model will return one code block containing the complete .md file (front matter + cleaned body). Save it to your Hugo content/ folder.

Inline directives (cheat sheet)

Put these inside your SOURCE_TEXT (each on its own line). The formatter will read them, use them in front matter, then remove them from the body.
	•	[[merge-source: <filename.ext>]]
Example: [[merge-source: welcome-to-merl.pdf]]
Sets [params.image_merge].source. If no output is given, it will default to /images/<slug>-social.png and also set that as your cover/OG image.
	•	[[merge-output: /images/<file>]]
Example: [[merge-output: /images/welcome-cover.png]]
Sets [params.image_merge].output. If no cover image is set yet, this becomes images[0] and [params.og].image.
	•	[[merge-role: cover|og|body|cover,og]]
Example: [[merge-role: cover,og]]
Controls where the merged image is used. If it includes body, the page body will include a figure referencing the merged output.
	•	[[cover-image: /images/<file>]]
Example: [[cover-image: /images/merl-hero.jpg]]
Forces images[0] and [params.og].image to this file.

Minimal example input

[[merge-source: welcome-to-merl.pdf]]
[[merge-output: /images/welcome-to-merl-cover.png]]
[[merge-role: cover,og]]

Title: Welcome to MERL
Tags: MERL, robotics, open-source, STEM Education
Categories: Lab, Education
Hero: /images/avatar.jpeg

# Welcome to the Multidisciplinary Educational Robotics Lab (MERL)
At MERL, we design inclusive, open-source robotics platforms...

What you’ll get back: one fenced code block with a complete .md—TOML front matter filled, clean Markdown body, directives removed, and [params.image_merge] populated.

Where to save & how to reference
	•	Page file: content/welcome-to-merl.md (or create a page bundle: content/welcome-to-merl/index.md).
	•	Images: Use absolute paths (/images/...) unless your theme expects bundle-relative paths (then place files inside the bundle and update paths).
	•	Type: Stays "page" unless you’re targeting a section with list templates (e.g., type = "post").

Do’s & don’ts

Do
	•	Keep tags 3–10, lower-case nouns.
	•	Keep categories broad (1–3 items).
	•	Write a 150–160 char meta description (the prompt will create or refine one).
	•	Use meaningful link text (the prompt converts raw URLs).

Don’t
	•	Duplicate the H1 in the body if your theme renders .Title by default.
	•	Mix YAML/JSON front matter—this prompt is TOML only (+++).
	•	Paste multiple articles at once.

Multilingual tips (if you use i18n)
	•	Put language variants under content/en/..., content/zh/..., etc., or add lang = "en" in [params.og] (or front matter) if your theme supports it.
	•	Use aliases = ["/old-path/"] to preserve old URLs when renaming slugs.

Quick QA checklist
	•	Front matter keys exist: title, date, draft, tags, categories, description, images, slug, type.
	•	Description length ~150–160 chars, no emoji.
	•	Slug is kebab-case ASCII only.
	•	images[0] and [params.og].image point to a real file.
	•	If merge-role includes body, confirm there’s a figure shortcode at the top.

Troubleshooting
	•	If ChatGPT ever adds commentary outside the code block, say:
“Return ONLY the finished .md file inside one code block.”
	•	If your theme needs a different figure shortcode (e.g., figurex), mention it in the source (the prompt already prefers figurex when explicitly referenced).
	•	If dates are wrong, include a precise ISO timestamp with offset in your SOURCE_TEXT; the formatter will use it.

That’s it—paste the prompt, drop in your article + optional directives, and save the returned code block as your Hugo page.